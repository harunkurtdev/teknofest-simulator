[
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "WebotsArduVehicle",
        "importPath": "webots_vehicle",
        "description": "webots_vehicle",
        "isExtraImport": true,
        "detail": "webots_vehicle",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "socket",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "socket",
        "description": "socket",
        "detail": "socket",
        "documentation": {}
    },
    {
        "label": "select",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "select",
        "description": "select",
        "detail": "select",
        "documentation": {}
    },
    {
        "label": "struct",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "struct",
        "description": "struct",
        "detail": "struct",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Robot",
        "importPath": "controller",
        "description": "controller",
        "isExtraImport": true,
        "detail": "controller",
        "documentation": {}
    },
    {
        "label": "Camera",
        "importPath": "controller",
        "description": "controller",
        "isExtraImport": true,
        "detail": "controller",
        "documentation": {}
    },
    {
        "label": "RangeFinder",
        "importPath": "controller",
        "description": "controller",
        "isExtraImport": true,
        "detail": "controller",
        "documentation": {}
    },
    {
        "label": "cv2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cv2",
        "description": "cv2",
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "get_args",
        "kind": 2,
        "importPath": "controllers.ardupilot_vehicle_controller.ardupilot_vehicle_controller",
        "description": "controllers.ardupilot_vehicle_controller.ardupilot_vehicle_controller",
        "peekOfCode": "def get_args():\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--motors\", \"-m\",\n                        type=str,\n                        default=\"m1_motor, m2_motor, m3_motor, m4_motor\",\n                        help=\"Comma spaced list of motor names in ardupilot numerical order (ex --motors \\\"m1,m2,m3, m4\\\")\")\n    parser.add_argument(\"--reversed-motors\", \"-r\",\n                        type=str,\n                        default=None,\n                        help=\"Comma spaced list of motors to reverse (starting from 1, in ardupilot order)\")",
        "detail": "controllers.ardupilot_vehicle_controller.ardupilot_vehicle_controller",
        "documentation": {}
    },
    {
        "label": "WebotsArduVehicle",
        "kind": 6,
        "importPath": "controllers.ardupilot_vehicle_controller.webots_vehicle",
        "description": "controllers.ardupilot_vehicle_controller.webots_vehicle",
        "peekOfCode": "class WebotsArduVehicle():\n    \"\"\"Class representing an ArduPilot controlled Webots Vehicle\"\"\"\n    controls_struct_format = 'f'*16\n    controls_struct_size = struct.calcsize(controls_struct_format)\n    fdm_struct_format = 'd'*(1+3+3+3+3+3)\n    fdm_struct_size = struct.calcsize(fdm_struct_format)\n    def __init__(self,\n                 motor_names: List[str],\n                 accel_name: str = \"accelerometer\",\n                 imu_name: str = \"inertial unit\",",
        "detail": "controllers.ardupilot_vehicle_controller.webots_vehicle",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PYTHONIOENCODING\"]",
        "kind": 5,
        "importPath": "controllers.ardupilot_vehicle_controller.webots_vehicle",
        "description": "controllers.ardupilot_vehicle_controller.webots_vehicle",
        "peekOfCode": "os.environ[\"PYTHONIOENCODING\"] = \"UTF-8\"\nsys.path.append(f\"{WEBOTS_HOME}/lib/controller/python\")\nfrom controller import Robot, Camera, RangeFinder # noqa: E401, E402\nclass WebotsArduVehicle():\n    \"\"\"Class representing an ArduPilot controlled Webots Vehicle\"\"\"\n    controls_struct_format = 'f'*16\n    controls_struct_size = struct.calcsize(controls_struct_format)\n    fdm_struct_format = 'd'*(1+3+3+3+3+3)\n    fdm_struct_size = struct.calcsize(fdm_struct_format)\n    def __init__(self,",
        "detail": "controllers.ardupilot_vehicle_controller.webots_vehicle",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "scripts.example_aruco_detection",
        "description": "scripts.example_aruco_detection",
        "peekOfCode": "s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.connect((\"127.0.0.1\", 5599))\n# ArUco setup\naruco_dict = cv2.aruco.Dictionary_get(cv2.aruco.DICT_4X4_50)\naruco_params = cv2.aruco.DetectorParameters_create()\nheader_size = struct.calcsize(\"=HH\")\nwhile True:\n    # receive header\n    header = s.recv(header_size)\n    if len(header) != header_size:",
        "detail": "scripts.example_aruco_detection",
        "documentation": {}
    },
    {
        "label": "aruco_dict",
        "kind": 5,
        "importPath": "scripts.example_aruco_detection",
        "description": "scripts.example_aruco_detection",
        "peekOfCode": "aruco_dict = cv2.aruco.Dictionary_get(cv2.aruco.DICT_4X4_50)\naruco_params = cv2.aruco.DetectorParameters_create()\nheader_size = struct.calcsize(\"=HH\")\nwhile True:\n    # receive header\n    header = s.recv(header_size)\n    if len(header) != header_size:\n        print(\"Header size mismatch\")\n        break\n    # parse header",
        "detail": "scripts.example_aruco_detection",
        "documentation": {}
    },
    {
        "label": "aruco_params",
        "kind": 5,
        "importPath": "scripts.example_aruco_detection",
        "description": "scripts.example_aruco_detection",
        "peekOfCode": "aruco_params = cv2.aruco.DetectorParameters_create()\nheader_size = struct.calcsize(\"=HH\")\nwhile True:\n    # receive header\n    header = s.recv(header_size)\n    if len(header) != header_size:\n        print(\"Header size mismatch\")\n        break\n    # parse header\n    width, height = struct.unpack(\"=HH\", header)",
        "detail": "scripts.example_aruco_detection",
        "documentation": {}
    },
    {
        "label": "header_size",
        "kind": 5,
        "importPath": "scripts.example_aruco_detection",
        "description": "scripts.example_aruco_detection",
        "peekOfCode": "header_size = struct.calcsize(\"=HH\")\nwhile True:\n    # receive header\n    header = s.recv(header_size)\n    if len(header) != header_size:\n        print(\"Header size mismatch\")\n        break\n    # parse header\n    width, height = struct.unpack(\"=HH\", header)\n    # for CV applications we may want camera intrinsics such as focal length: ",
        "detail": "scripts.example_aruco_detection",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "scripts.example_camera_receive",
        "description": "scripts.example_camera_receive",
        "peekOfCode": "s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.connect((\"127.0.0.1\", 5599))\nheader_size = struct.calcsize(\"=HH\")\nwhile True:\n    # receive header\n    header = s.recv(header_size)\n    if len(header) != header_size:\n        print(\"Header size mismatch\")\n        break\n    # parse header",
        "detail": "scripts.example_camera_receive",
        "documentation": {}
    },
    {
        "label": "header_size",
        "kind": 5,
        "importPath": "scripts.example_camera_receive",
        "description": "scripts.example_camera_receive",
        "peekOfCode": "header_size = struct.calcsize(\"=HH\")\nwhile True:\n    # receive header\n    header = s.recv(header_size)\n    if len(header) != header_size:\n        print(\"Header size mismatch\")\n        break\n    # parse header\n    width, height = struct.unpack(\"=HH\", header)\n    # receive image",
        "detail": "scripts.example_camera_receive",
        "documentation": {}
    }
]